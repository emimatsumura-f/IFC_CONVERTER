# アプリケーションの設定ファイル
import os

# プロジェクトのルートディレクトリパスを取得
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# インスタンス固有のデータを保存するディレクトリパス
INSTANCE_DIR = os.path.join(BASE_DIR, 'instance')

# SQLiteデータベースファイルのパス
DATABASE_PATH = os.path.join(INSTANCE_DIR, 'ifc_converter.db')

class Config:
    # セッション管理用の秘密鍵
    # 環境変数から取得するか、デフォルト値として'dev'を使用
    SECRET_KEY = os.environ.get('SESSION_SECRET', 'dev')

    # データベース接続URL
    # 環境変数から取得するか、デフォルトでSQLiteを使用
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL', f"sqlite:///{DATABASE_PATH}")

    # SQLAlchemyのイベント通知システムを無効化（パフォーマンス向上のため）
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # データベース接続プールの設定
    SQLALCHEMY_ENGINE_OPTIONS = {
        "pool_recycle": 300,  # 接続を300秒ごとにリサイクル
        "pool_pre_ping": True,  # 接続確認のpingを有効化
    }

    # アップロードファイルの最大サイズを100MBに制限
    MAX_CONTENT_LENGTH = 100 * 1024 * 1024

    # アップロードされたファイルの保存ディレクトリ
    UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')
    
    # 必要なディレクトリを自動作成（存在しない場合のみ）
    os.makedirs(INSTANCE_DIR, exist_ok=True)
    os.makedirs(UPLOAD_FOLDER, exist_ok=True)